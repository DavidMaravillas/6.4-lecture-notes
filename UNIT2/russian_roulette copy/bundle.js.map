{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ComputerPlayer.js","webpack:///./Game.js","webpack:///./HumanPlayer.js","webpack:///./Revolver.js","webpack:///./View.js","webpack:///./index.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gC;;;;;;;;;;;;ACVA;AAAA,oBAAoB,mBAAO,CAAC,0CAAkB;AAC9C,uBAAuB,mBAAO,CAAC,gDAAqB;AACpD,iBAAiB,mBAAO,CAAC,oCAAe;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;ACzDpB;;AAEA;AACA;AACA,yB;AACA,0B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sB;;;;;;;;;;;;ACdA;AACA;AACA;AACA;;AAEA,iB;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA,sB;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qB;AACA;AACA;;AAEA;;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4CAA4C,sDAAc;AAC/D;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,sDAAc;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACjEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACc;AACM;AACpB;AAC5B;AACA,iBAAiB,sDAAW;AAC5B,iBAAiB,yDAAc;AAC/B,kBAAkB,sDAAW;AAC7B,iBAAiB,gDAAI;AACrB;AACA,MAAM,gDAAI;AACV,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","class ComputerPlayer {\n  constructor(name =\"Robot\") {\n    this.name = name;\n    this.alive = true;\n  }\n  getLastWords() {\n    return \"Blorp! I wish I was human.\"\n  }\n}\n\nmodule.exports = ComputerPlayer;","const HumanPlayer = require(\"./HumanPlayer.js\");\nconst ComputerPlayer = require(\"./ComputerPlayer.js\");\nconst Revolver = require(\"./Revolver.js\");\n\n// Should have a play that runs unit when?\n// Wil get last words, then print words, then pull trigger.\n// Should have switchPlayers\n\nclass Game {\n  constructor(players) {\n    this.players = players;\n    this.currentPlayer = this.players[0];\n    this.revolver = new Revolver(6);\n  }\n\n  switchPlayers() {\n    this.players.push(this.players.shift());\n    this.currentPlayer = this.players[0];\n  }\n\n  lockAndLoad() {\n    this.revolver.addBullet();\n    this.revolver.spinBarrel();\n  }\n  handleDeath() {\n    this.players.shift();\n    this.currentPlayer = this.players[0];\n    this.revolver.addBullet();\n    this.revolver.spinBarrel();\n  }\n\n  isGameOver() {\n      return this.players.length === 1;\n  }\n\n  play() {\n    this.revolver.addBullet();\n    this.revolver.spinBarrel();\n    while (this.players.length > 1) {\n      console.log(this.currentPlayer.name, \" its your turn\");\n      let lastWords = this.currentPlayer.getLastWords();\n      console.log(lastWords);\n      let fired = this.revolver.pullTrigger();\n      if (fired) {\n        console.log(this.currentPlayer.name, \" has died\");\n        this.players.shift();\n        this.currentPlayer = this.players[0];\n        this.revolver.addBullet();\n        this.revolver.spinBarrel();\n      } else {\n        this.switchPlayers();\n      }\n    }\n    console.log(this.players[0].name + \" is the sole survivor!\");\n  }\n}\n\nexport default Game;\n","// const readline = require(\"readline-sync\");\n\nclass HumanPlayer {\n    constructor(name) {\n        this.name = name; \n        this.alive = true; \n    }\n    getLastWords() {\n        return readline.question(\"What are your last words? \")\n    }\n}\n\nmodule.exports = HumanPlayer;\n\n// const fred = new HumanPlayer(\"Fred\");\n// fred.getLastWords()","\nclass Revolver {\n    constructor(chamberCount) {\n        this.chambers = new Array(chamberCount).fill(null);\n    }\n\n    addBullet() { \n        for(let i = 0; i < this.chambers.length; i++) {\n            if(!this.chambers[i]) {\n                this.chambers[i] = true;\n                break; \n            }\n        }\n    }\n\n    spinBarrel() {\n        let spin = Math.floor(Math.random() * this.chambers.length)\n        for(let i = 0; i < spin; i++) {\n            this.chambers.push(this.chambers.shift())\n        }\n\n    }\n\n    pullTrigger() {\n        let fired = this.chambers.shift();\n        this.chambers.push(null)\n        return fired; \n    }\n}\n\nmodule.exports = Revolver;\n\n","import ComputerPlayer from \"./ComputerPlayer\";\nclass View {\n  constructor(game, el) {\n    this.game = game;\n    this.el = el;\n    this.game.lockAndLoad();\n    this.play();\n  }\n  play() {\n    if (this.game.isGameOver()) {\n      let h1 = document.querySelector(\"h1\");\n      h1.innerText = this.game.currentPlayer.name + \" is the sole survivor!\";\n      let button = document.querySelector(\"button\");\n      let input = document.querySelector(\"input\");\n      button.parentNode.removeChild(button);\n      input.parentNode.removeChild(input);\n    } else if(this.game.currentPlayer instanceof ComputerPlayer) {\n        this.result();\n    } else {\n      this.displayBoard();\n      this.bindEvents();\n    }\n  }\n\n  displayBoard() {\n    this.el.innerHTML = \"\";\n    let h1 = document.createElement(\"h1\");\n    h1.innerText = this.game.currentPlayer.name + \" what are your last words?\";\n    let input = document.createElement(\"input\");\n    let button = document.createElement(\"button\");\n    button.innerText = \"Amen\";\n    this.el.appendChild(h1);\n    this.el.appendChild(input);\n    this.el.appendChild(button);\n  }\n\n  bindEvents() {\n    let button = document.querySelector(\"button\");\n    button.addEventListener(\"click\", () => this.result());\n  }\n  fire(result) {\n    if (result) {\n      let ul = document.querySelector(\"ul\");\n      let li = document.createElement(\"li\");\n      li.innerText = this.game.currentPlayer.name + \" has died!\";\n      ul.appendChild(li);\n      this.game.handleDeath();\n    } else {\n      this.game.switchPlayers();\n    }\n    this.play();\n  }\n\n  result() {\n    let ul = document.querySelector(\"#lastWords\");\n    let li = document.createElement(\"li\");\n    let input = document.querySelector(\"input\");\n    let value = this.game.currentPlayer instanceof ComputerPlayer ? this.game.currentPlayer.getLastWords() : input.value;\n    li.innerText = this.game.currentPlayer.name + \"s last words were: \" + value;\n    let result = this.game.revolver.pullTrigger();\n    ul.appendChild(li);\n    this.fire(result);\n  }\n}\n\nexport default View;\n","import Game from './Game.js'\nimport HumanPlayer from './HumanPlayer.js'\nimport ComputerPlayer from './ComputerPlayer.js'\nimport View from './View.js'\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let fred = new HumanPlayer(\"Fred\");\n  let robo = new ComputerPlayer();\n  let becky = new HumanPlayer(\"Becky\");\n  let game = new Game([fred, robo, becky])\n  let el = document.querySelector(\"#rr\");\n  new View(game, el)\n});\n"],"sourceRoot":""}